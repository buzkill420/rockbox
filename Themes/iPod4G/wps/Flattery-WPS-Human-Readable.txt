# ┌──────────────────────────────────────────────────────────────────────────┐
# │  ___ _      _   _                  __   ___   __    ___                  │
# │ | __| |__ _| |_| |_ ___ _ _ _  _  / /__| _ ) / /__ / __|_____ _____ _ _  │
# │ | _|| / _` |  _|  _/ -_) '_| || |/ /___| _ \/ /___| (__/ _ \ V / -_) '_| │
# │ |_| |_\__,_|\__|\__\___|_|  \_, /_/    |___/_/     \___\___/\_/\___|_|   │
# │                             |__/                                         │
# │                            __      _____  ___                            │
# │                            \ \    / / _ \/ __|     by Christian Soffke   │
# │   2021-03-22                \ \/\/ /|  _/\__ \                CC-BY-SA   │
# │                              \_/\_/ |_|  |___/                           │
# │   ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓   │
# │   ┃                                                                  ┃   │
# │   ┃             Designed for and tested with B&W iPod 4G             ┃   │
# │   ┃                                                                  ┃   │
# │   ┃ Uses original icons as well as icons from the following themes:  ┃   │
# │   ┃                                                                  ┃   │
# │   ┃         ipodVOL by xameius, submitted by Stephen Carroll         ┃   │
# │   ┃   (Battery Status, Hold Indicator, Player Status, Repeat Mode,   ┃   │
# │   ┃                     modified Speaker Icons)                      ┃   │
# │   ┃                                                                  ┃   │
# │   ┃          ChicagoUnified by Brendan Riera (Shuffle Icon)          ┃   │
# │   ┃                                                                  ┃   │
# │   ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛   │
# │                                                                          │
# └──────────────────────────────────────────────────────────────────────────┘
#
#     Human-readable version.
#
#     To generate a valid SBS or WPS from this file, execute the piece of
#     AppleScript on the bottom. It will do the following things for you:
#
#        1. Remove AppleScript code from this file
#           (everything that comes after this line:)
#               "# --- End of Rockbox theme. Beginning of AppleScript ---"
#        3. Insert text blocks that were previously defined,
#           and replace variables if necessary
#        4. Remove all linefeeds
#        5. Remove all tabs
#        6. Remove every line that starts with the "#" character
#
#


#	Load needed fonts

%Fl(2,10-Nimbus.fnt)
%Fl(3,14-Nimbus.fnt)

#	Preload icons

%xl(M,speakerMute.bmp,0,0)
%xl(L,speakerLoudest.bmp,0,0)
%xl(R,repeatMode.bmp,0,0,4)
%xl(S,shuffle.bmp,15,1)

%xl(bdv,volumeBarBackdrop.bmp,0,0)
%xl(bdp,progressBarBackdrop.bmp,0,0)
%xl(bdps,progressBarShortBackdrop.bmp,0,0)



# ---------
# Logic:
# ---------

# 	Display Cover Art for theme "FlatCover", if available

%?if(
%St(wps), =,FlatCover)<
	%?C<
		%Vd(songinfoc)
		%Vd(cover)
	|
		%Vd(songinfo)
	>

|
	%Vd(songinfo)
>



%?mv(2)<
	%?if(
	%St(volume display), =, numeric)<
		%Vd(vnum)
	|
		%Vd(m)
		%Vd(v)
		%Vd(l)
		%Vd(db)
	>
|
	%?if(
	%St(wps), =,Flattery-B)<
		%Vd(shortelapsed)
		%Vd(shortprogress)
	|
		%Vd(e)
		%Vd(p)
		%Vd(r)
	>
>




# ---------
# Viewports:
# ---------


# 	Position in Playlist and number of items in total 
#	(displayed in upper left corner, below title bar)

%V(4,22,120,10,2)%Vf(0)%Vb(3) 
%al%pp %Sx(of) %pe



# 	Repeat Mode and Shuffle indicators
#	displayed in the upper right corner, below title bar

%V(-30,23,24,9,2)%Vf(0)%Vb(3)
%?mm<|%xd(Ra)|%xd(Rb)|%xd(Rc)|%xd(Rd)>
%?if(%ps, =, s)<%xd(S)|>


# --------------------------------------
# --------   Volume Indicators   -------
# --------------------------------------


# 	Mute Speaker icon, to the left of the volume bar

%Vl(m,9,100,14,12,-)
%xd(M)


# 	Volume Bar 

%Vl(v,19,101,120,9,-)

# 	Draw volume bar 

%pv(0,0,120,9,volumeBar.bmp,backdrop,bdv)


# 	Loudest Speaker icon, to the right of the volume bar

%Vl(l,-19,100,14,12,-)
%xd(L)

# Volume Level Bellow volume Bar

%Vl(db,0,110,-,14,-)
%ac%?if(%pv, >, 0)<+|>%pvdB


# Numerical volume display

%Vl(vnum,0,101,160,10,2)%Vf(0)%Vb(3)
%ac%pv dB




# --------------------------------------
# -------- Progress Indicators   -------
# --------------------------------------


# 	Progress Bar 

%Vl(p,8,101,144,9,-)

# 	Draw progress bar 

%pb(0,0,144,9,progressBar.bmp,backdrop,bdp)



# 	Elapsed Time, on the left, below progress bar

%Vl(e,8,110,72,14,3)
%al%pc


# 	Time remaining, on the right, below progress bar

%Vl(r,-80,110,72,14,3)
%ar-%pr


# 	(Shorter) progress Bar 

%Vl(shortprogress,42,101,110,9,-)

# 	Draw progress bar 

%pb(0,0,110,9,progressBarShort.bmp,backdrop,bdps)

# Elapsed time to the left of the shorter progress bar

%Vl(shortelapsed,0,99,37,14,3)
%ar%pc


# -----------  Song Info   -------------
# -----------  WITH COVER  -------------
# --------------------------------------

# Album Art 
%Vl(cover,5,40,46,48,-)
%Cl(0,0,46,46,c,c)
%Cd


# Title, or filename if no title is available 

%Vl(songinfoc,55,40,105,14,3)
%s%al%?it<%it|%fn>

# Composer if available (only for Classical music) & Artist 

%Vl(songinfoc,55,56,105,14,3)
%s%al%?if(%ig,=,Classical)<%?ic<By %ic - >%ia|%ia>

# Album 

%Vl(songinfoc,55,72,105,14,3)
%s%al%id


# -----------  Song Info   -------------
# ---------  WITHOUT COVER  ------------
# --------------------------------------

# Title, or filename if no title is available 

%Vl(songinfo,0,40,160,14,3)
%s%ac%?it<%it|%fn>


# Composer if available (only for Classical music) & Artist 

%Vl(songinfo,0,56,160,14,3)
%s%ac%?if(%ig,=,Classical)<%?ic<By %ic - >%ia|%ia>

# Album 

%Vl(songinfo,0,72,160,14,3)
%s%ac%id




# --- End of Rockbox theme. Beginning of AppleScript ---
set theFile to choose file
set theText to read theFile
tell application "Finder" to set nameOfTheFile to name of theFile
set theOutput to "# Machine-generated content.
# Check out \"" & nameOfTheFile & "\" for the nicely formatted and more easily readable version of this file!
#
#
"
set theLines to textItems(theText, {"
"})
set blocks to {}
set currentBlocks to {}
set fullyDefinedBlocks to {}
set blockContent to {}
set blockVariables to {}

repeat with aLine in theLines
	set aLine to aLine as text
	
	if (aLine is "# --- End of Rockbox theme. Beginning of AppleScript ---") then exit repeat
	if ((aLine is not "") ¬
		and (aLine is not "(*") and (aLine is not "*)") ¬
		and ((aLine does not start with "#"))) then
		
		if (aLine) starts with "define-block:" then
			set blockInfo to textItems(aLine, {"define-block:", "(variable:", ")"})
			
			if item 2 of blockInfo is not "" then
				set blockName to (item 2 of blockInfo) as text
			else
				error "Block name is missing from definition"
			end if
			
			if blocks does not contain blockName then
				copy blockName to the end of blocks
				copy blockName to the end of currentBlocks
				set blockContent to blockContent & {""}
				
				if length of blockInfo > 2 and item 3 of blockInfo is not "" then
					copy item 3 of blockInfo to the end of blockVariables
				else
					copy "" to the end of blockVariables
				end if
			else
				error "Block is defined multiple times"
			end if
			
		else if (aLine) starts with "end-block:" then
			set blockInfo to textItems(aLine, {"end-block:", "(variable:", ")"})
			
			if item 2 of blockInfo is not "" then
				set blockName to item 2 of blockInfo
			else
				error "Block name is missing from end-block"
			end if
			
			if currentBlocks does not contain blockName then
				error "The name for end block " & blockName & " has not been previously defined"
			end if
			
			set currentBlocks to removeBlock(blockName, currentBlocks)
			copy blockName to the end of fullyDefinedBlocks
			
		else if (aLine) starts with "insert-block:" then
			set blockInfo to textItems(aLine, {"insert-block:", "(variable:", ")"})
			
			if item 2 of blockInfo is not "" then
				set blockName to item 2 of blockInfo
			else
				error "Block name is missing from insert-block instruction"
			end if
			
			
			if fullyDefinedBlocks does not contain blockName then
				error "Attempt to insert block that was not previously defined: " & blockName
			end if
			
			set replacementVariable to ""
			if length of blockInfo > 2 and item 3 of blockInfo is not "" then
				set replacementVariable to item 3 of blockInfo
			end if
			
			
			
			set contentToInsert to getBlockContent(blockName, blocks, blockContent, blockVariables, replacementVariable)
			set theOutput to theOutput & contentToInsert
			
			repeat with i from 1 to length of blocks
				if ((item i of blocks) as text) is in currentBlocks then
					set item i of blockContent to (item i of blockContent) & contentToInsert
				end if
			end repeat
		else
			set theItems to textItems(aLine, {"	"})
			
			repeat with anItem in theItems
				set theOutput to theOutput & anItem
				
				repeat with i from 1 to length of blocks
					if ((item i of blocks) as text) is in currentBlocks then
						set item i of blockContent to (item i of blockContent) & anItem
					end if
				end repeat
			end repeat
		end if
	end if
end repeat

if length of currentBlocks ≠ 0 then error "Not all blocks have been closed"
writeToFile(theOutput, choose file name)
return "All done"

on getBlockContent(blockName, blocks, blockContent, blockVariables, replacementVariable)
	repeat with i from 1 to length of blocks
		if item i of blocks is blockName then
			if replacementVariable is "" and item i of blockVariables is "" then
				return item i of blockContent
			else
				if item i of blockVariables is "" then error
				
				return replaceIn(item i of blockContent, item i of blockVariables, replacementVariable)
			end if
		end if
	end repeat
end getBlockContent

on replaceIn(content, replace, replaceWith)
	set newDelims to {replaceWith}
	
	set theItems to textItems(content, {replace})
	
	set currentDelims to text item delimiters
	try
		set text item delimiters to newDelims
		set newContent to theItems as text
	on error
		set text item delimiters to currentDelims
		error
	end try
	set text item delimiters to currentDelims
	
	return newContent
end replaceIn

on removeBlock(blockName, currentBlocks)
	set newBlocks to {}
	repeat with anItem in currentBlocks
		if anItem as text is not blockName then copy anItem as text to the end of newBlocks
	end repeat
	return newBlocks
end removeBlock

on textItems(theText, delimiters)
	set currentDelims to text item delimiters
	try
		set text item delimiters to delimiters
		set theItems to (text items of theText)
	on error
		set text item delimiters to currentDelims
	end try
	set text item delimiters to currentDelims
	
	return theItems
end textItems

on writeToFile(theData, theFile)
	try
		set fileAccess to open for access file (theFile as text) with write permission
		set eof of fileAccess to 0
		write theData to fileAccess starting at eof as «class utf8»
		close access fileAccess
		return true
	on error
		try
			close access fileAccess
		end try
		return false
	end try
end writeToFile